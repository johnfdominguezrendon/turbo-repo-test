name: Manual Semantic Release

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  APP_VERSION: '1.0.27'  # Default version, will be updated dynamically

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    environment: pre-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate gh
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "USING_TAG=$latest" >> $GITHUB_ENV
          echo "The latest tag is $latest"

      - name: Generate changelog from PRs
        id: changelog
        run: |
          changelog="What's Changed\n\n"

          pr_numbers=$(git log ${{ env.USING_TAG }}..HEAD --merges --pretty=format:'%s' \
                      | grep -oE '#[0-9]+' | tr -d '#' | sort -u)

          if [ -z "$pr_numbers" ]; then
            changelog+="No pull requests merged."
          else
            for pr in $pr_numbers; do
              info=$(gh pr view $pr --json title,author,number \
                      --jq '"- \(.title) by @\(.author.login) in #\(.number)"')
              changelog+="$info\n"
            done
          fi

          # Save to file
          echo -e "$changelog" > changelog.txt

          # Output as multiline
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Create & push Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag v${{ env.APP_VERSION }}
          git push origin v${{ env.APP_VERSION }}

      - name: Create pre-release on GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.APP_VERSION }}
          name: Pre-Release v${{ env.APP_VERSION }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Teams on Pre-Release
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL_RELEASE }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Default to a pre-release styleâ€¦
          titleText="ðŸ“¦ Pre-Release: v${APP_VERSION}"
          txtColor="good"
          btnColor="positive"
          isPrerelease="true"

          # â€¦then override for warning (orange) styling
          if [[ "$isPrerelease" == "true" ]]; then
            titleText="ðŸ“¦ Pre-Release: v${APP_VERSION}"
            txtColor="warning"
            btnColor="destructive"
          fi

          # Escape the changelog into a JSON string literal
          rawNotes=$(printf '%s' "${{ steps.changelog.outputs.changelog }}" | jq -R -s .)

          # Send the Adaptive Card
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"type\": \"AdaptiveCard\",
              \"version\": \"1.0\",
              \"body\": [
                {
                  \"type\": \"TextBlock\",
                  \"weight\": \"Bolder\",
                  \"size\": \"Large\",
                  \"color\": \"$txtColor\",
                  \"text\": \"$titleText\"
                },
                {
                  \"type\": \"FactSet\",
                  \"facts\": [
                    { \"title\": \"Version:\", \"value\": \"v${APP_VERSION}\" },
                    { \"title\": \"Commit:\",  \"value\": \"$GITHUB_SHA\" },
                    { \"title\": \"Author:\",  \"value\": \"$GITHUB_ACTOR\" }
                  ]
                },
                {
                  \"type\": \"TextBlock\",
                  \"text\": \"What's Changed\",
                  \"weight\": \"Bolder\",
                  \"wrap\": true
                },
                {
                  \"type\": \"TextBlock\",
                  \"text\": $rawNotes,
                  \"wrap\": true
                }
              ],
              \"actions\": [
                {
                  \"type\": \"Action.OpenUrl\",
                  \"title\": \"View Pre-Release on GitHub\",
                  \"url\": \"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${APP_VERSION}\",
                  \"style\": \"$btnColor\"
                }
              ]
            }" \
            "$TEAMS_WEBHOOK_URL"


  deploy_to_production:
    runs-on: ubuntu-latest
    environment: production
    needs: prepare_release
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy to production
        run: echo "Deploying version to production..."

  finalize_release:
    needs: [prepare_release, deploy_to_production]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete pre-release (optional)
        run: |
          gh release delete v${{ env.APP_VERSION }} --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Recreate final release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.APP_VERSION }}
          name: Release v${{ env.APP_VERSION }}
          body: ${{ needs.prepare_release.outputs.changelog }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Teams on Final Release
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL_RELEASE }}
        run: |
          # Set default styling for a full release
          titleText="ðŸ“¦ Release: v${APP_VERSION}"
          txtColor="good"
          btnColor="positive"
          isPrerelease="false"

          # If it's a pre-release, tweak styling
          if [[ "isPrerelease" == "true" ]]; then
            titleText="ðŸ§ª Pre-release: v${APP_VERSION}"
            txtColor="warning"
            btnColor="destructive"
            isPrerelease="true"
          fi

          # Turn your changelog into a JSON string literal
          rawNotes=$(printf '%s' "${{ needs.prepare_release.outputs.changelog}}" | jq -R -s .)

          # Send the Adaptive Card
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"type\": \"AdaptiveCard\",
              \"version\": \"1.0\",
              \"body\": [
                {
                  \"type\": \"TextBlock\",
                  \"weight\": \"Bolder\",
                  \"size\": \"Large\",
                  \"color\": \"$txtColor\",
                  \"text\": \"$titleText\"
                },
                {
                  \"type\": \"FactSet\",
                  \"facts\": [
                    { \"title\": \"Version:\", \"value\": \"v${APP_VERSION}\" },
                    { \"title\": \"Commit:\",  \"value\": \"$GITHUB_SHA\" },
                    { \"title\": \"Author:\",  \"value\": \"$GITHUB_ACTOR\" }
                  ]
                },
                {
                  \"type\": \"TextBlock\",
                  \"text\": \"What's Changed\",
                  \"weight\": \"Bolder\",
                  \"wrap\": true
                },
                {
                  \"type\": \"TextBlock\",
                  \"text\": $rawNotes,
                  \"wrap\": true
                }
              ],
              \"actions\": [
                {
                  \"type\": \"Action.OpenUrl\",
                  \"title\": \"View Release on GitHub\",
                  \"url\": \"GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/tag/v${APP_VERSION}\",
                  \"style\": \"$btnColor\"
                }
              ]
            }" \
            "$TEAMS_WEBHOOK_URL"
