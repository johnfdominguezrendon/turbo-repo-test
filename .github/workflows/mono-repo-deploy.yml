name: Pipeline
on: 
  push:
  # pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
jobs:
  checks:
    runs-on: ubuntu-latest
    name: Build
    env:
      TURBO_RUN_FILTER: ${{ github.event_name == 'pull_request' && '...[origin/main]' || '...[HEAD^]' }}
    outputs:
      changed-app: ${{ steps.changed-app.outputs.result }}
      changed-docs: ${{ steps.changed-docs.outputs.result }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
        
      - name: Install Dependencies
        run: npm install

      - name: Changeset
        id: changeset
        run: |
          echo '${{ env.TURBO_RUN_FILTER }}'
          npx turbo --version
          content=`npx turbo build --filter=${{env.TURBO_RUN_FILTER }} --dry-run=json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=result::$content"

      - name: Changed app?
        id: changed-app
        # 1. Using the 'output' of the 'changeset' step inside the `if` to check if the specific app has changed
        # 2. When `true`, we store it in the 'output' of the current step.
        if: ${{ contains(fromJSON(steps.changeset.outputs.result).packages, 'web') }}
        run: |
          echo "::set-output name=result::true"

      - name: Changed docs?
        id: changed-docs
        # 1. Using the 'output' of the 'changeset' step inside the `if` to check if the specific app has changed
        # 2. When `true`, we store it in the 'output' of the current step.
        if: ${{ contains(fromJSON(steps.changeset.outputs.result).packages, 'docs') }}
        run: |
          echo "::set-output name=result::true"

  release:
    runs-on: ubuntu-latest
    needs: checks
    if: ${{ needs.checks.outputs.changed-docs }}
    environment: 'pre-release'
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate gh
        run: echo "${{ secrets.REPO_TOKEN }}" | gh auth login --with-token

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "USING_TAG=$latest" >> $GITHUB_ENV
          echo "The latest tag is $latest"
        shell: bash

      - name: Generate or reuse changelog
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          set -x  # For debug logging

          APP_PATH="apps/docs"
          TAG="${USING_TAG:-v0.0.0}"  # Use fallback if not defined

          echo "Generating changelog for changes in path: $APP_PATH (since $TAG)"
          echo -e "What's Changed\n\n### docs\n" > changelog.txt

          pr_numbers=$(git log "$TAG"..HEAD --merges --pretty=format:'%s' -- "$APP_PATH" \
                        | grep -oE '#[0-9]+' | tr -d '#' | sort -u || true)

          if [[ -z "$pr_numbers" ]]; then
            echo "_No changes in this app._" >> changelog.txt
          else
            for pr in $pr_numbers; do
              if info=$(gh pr view "$pr" --json title,author,number \
                          --jq '"- \(.title) by @\(.author.login) (#\(.number))"' 2>/dev/null); then
                echo "$info" >> changelog.txt
              else
                echo "⚠️ Failed to fetch PR #$pr" >> changelog.txt
              fi
            done
          fi

          # Output changelog
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create & push Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          tag_name="docs@v1.1.11"

          git tag "$tag_name"
          git push origin "$tag_name"
        shell: bash

      - name: Create Github Pre-release or Release
        uses: softprops/action-gh-release@v1
        with:
            tag_name: docs@v1.1.11
            name: docs@v1.1.11
            body: ${{ steps.changelog.outputs.changelog }}
            prerelease: true
        env:
            GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

      - name: Shorten GitHub SHA
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
        shell: bash

      - name: Notify Teams on Pre-Release or Release
        env:
          APP_VERSION: docs@v1.1.11
          APP_NAME: docs
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL_RELEASE }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          SHORT_SHA: ${{ env.SHORT_SHA }}

        run: |
          isPrerelease="true"
          tag_name="${APP_NAME}@v${APP_VERSION}"

          titleText="📦 Release: ${APP_NAME} v${APP_VERSION}"
          txtColor="good"
          btnColor="positive"
          btnTitle="View Release on GitHub"

          if [[ "$isPrerelease" == "true" ]]; then
            titleText="🟠 Pre-Release: ${APP_NAME} v${APP_VERSION}"
            txtColor="good"
            btnColor="positive"
            btnTitle="View Pre-Release on GitHub"
          fi

          # Escape changelog into JSON literal
          rawNotes=$(printf '%s' "${{ steps.changelog.outputs.changelog }}" | jq -R -s .)

          # Send the Adaptive Card
          curl -X POST \
          -H "Content-Type: application/json" \
          -d "{
            \"type\": \"AdaptiveCard\",
            \"version\": \"1.0\",
            \"body\": [
              {
                \"type\": \"TextBlock\",
                \"weight\": \"Bolder\",
                \"size\": \"Large\",
                \"color\": \"$txtColor\",
                \"text\": \"$titleText\"
              },
              {
                \"type\": \"FactSet\",
                \"facts\": [
                  { \"title\": \"App:\", \"value\": \"${APP_NAME}\" },
                  { \"title\": \"Version:\", \"value\": \"v${APP_VERSION}\" },
                  { \"title\": \"Commit:\",  \"value\": \"${SHORT_SHA}\" },
                  { \"title\": \"Author:\",  \"value\": \"$GITHUB_ACTOR\" },
                  { \"title\": \"Repository:\",  \"value\": \"${GITHUB_REPOSITORY}\" }
                ]
              },
              {
                \"type\": \"TextBlock\",
                \"text\": \"What's Changed\",
                \"weight\": \"Bolder\",
                \"wrap\": true
              },
              {
                \"type\": \"TextBlock\",
                \"text\": $rawNotes,
                \"wrap\": true
              }
            ],
            \"actions\": [
              {
                \"type\": \"Action.OpenUrl\",
                \"title\": \"${btnTitle}\",
                \"url\": \"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${tag_name}\",
                \"style\": \"$btnColor\"
              }
            ]
          }" \
          "$TEAMS_WEBHOOK_URL"
        shell: bash

  release_web:
    runs-on: ubuntu-latest
    needs: checks
    if: ${{ needs.checks.outputs.changed-app }}
    environment: 'pre-release'
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate gh
        run: echo "${{ secrets.REPO_TOKEN }}" | gh auth login --with-token

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "USING_TAG=$latest" >> $GITHUB_ENV
          echo "The latest tag is $latest"
        shell: bash

      - name: Generate or reuse changelog
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          set -x  # For debug logging

          APP_PATH="apps/web"
          TAG="${USING_TAG:-v0.0.0}"  # Use fallback if not defined

          echo "Generating changelog for changes in path: $APP_PATH (since $TAG)"
          echo -e "What's Changed\n\n### web\n" > changelog.txt

          pr_numbers=$(git log "$TAG"..HEAD --merges --pretty=format:'%s' -- "$APP_PATH" \
                        | grep -oE '#[0-9]+' | tr -d '#' | sort -u || true)

          if [[ -z "$pr_numbers" ]]; then
            echo "_No changes in this app._" >> changelog.txt
          else
            for pr in $pr_numbers; do
              if info=$(gh pr view "$pr" --json title,author,number \
                          --jq '"- \(.title) by @\(.author.login) (#\(.number))"' 2>/dev/null); then
                echo "$info" >> changelog.txt
              else
                echo "⚠️ Failed to fetch PR #$pr" >> changelog.txt
              fi
            done
          fi

          # Output changelog
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create & push Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          tag_name="app@v1.1.11"

          git tag "$tag_name"
          git push origin "$tag_name"
        shell: bash

      - name: Create Github Pre-release or Release
        uses: softprops/action-gh-release@v1
        with:
            tag_name: app@v1.1.11
            name: app@v1.1.11
            body: ${{ steps.changelog.outputs.changelog }}
            prerelease: true
        env:
            GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

      - name: Shorten GitHub SHA
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
        shell: bash

      - name: Notify Teams on Pre-Release or Release
        env:
          APP_VERSION: app@v1.1.11
          APP_NAME: app
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL_RELEASE }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          SHORT_SHA: ${{ env.SHORT_SHA }}

        run: |
          isPrerelease="true"
          tag_name="${APP_NAME}@v${APP_VERSION}"

          titleText="📦 Release: ${APP_NAME} v${APP_VERSION}"
          txtColor="good"
          btnColor="positive"
          btnTitle="View Release on GitHub"

          if [[ "$isPrerelease" == "true" ]]; then
            titleText="🟠 Pre-Release: ${APP_NAME} v${APP_VERSION}"
            txtColor="good"
            btnColor="positive"
            btnTitle="View Pre-Release on GitHub"
          fi

          # Escape changelog into JSON literal
          rawNotes=$(printf '%s' "${{ steps.changelog.outputs.changelog }}" | jq -R -s .)

          # Send the Adaptive Card
          curl -X POST \
          -H "Content-Type: application/json" \
          -d "{
            \"type\": \"AdaptiveCard\",
            \"version\": \"1.0\",
            \"body\": [
              {
                \"type\": \"TextBlock\",
                \"weight\": \"Bolder\",
                \"size\": \"Large\",
                \"color\": \"$txtColor\",
                \"text\": \"$titleText\"
              },
              {
                \"type\": \"FactSet\",
                \"facts\": [
                  { \"title\": \"App:\", \"value\": \"${APP_NAME}\" },
                  { \"title\": \"Version:\", \"value\": \"v${APP_VERSION}\" },
                  { \"title\": \"Commit:\",  \"value\": \"${SHORT_SHA}\" },
                  { \"title\": \"Author:\",  \"value\": \"$GITHUB_ACTOR\" },
                  { \"title\": \"Repository:\",  \"value\": \"${GITHUB_REPOSITORY}\" }
                ]
              },
              {
                \"type\": \"TextBlock\",
                \"text\": \"What's Changed\",
                \"weight\": \"Bolder\",
                \"wrap\": true
              },
              {
                \"type\": \"TextBlock\",
                \"text\": $rawNotes,
                \"wrap\": true
              }
            ],
            \"actions\": [
              {
                \"type\": \"Action.OpenUrl\",
                \"title\": \"${btnTitle}\",
                \"url\": \"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${tag_name}\",
                \"style\": \"$btnColor\"
              }
            ]
          }" \
          "$TEAMS_WEBHOOK_URL"
        shell: bash

  publish_app:
    runs-on: ubuntu-latest
    name: Publish app
    needs: [checks, release]
    # ... more job settings (not relevent here)
    if: ${{ needs.checks.outputs.changed-app }}
    # Now this job only runs when the 'output' of the previous step is `true` for `changed-app`
    steps:
      - name: Publish app
        run: echo "deploy app"

  deploy_docs:
    runs-on: ubuntu-latest
    name: Publish docs
    needs: [checks, release]
    # ... more job settings (not relevent here)
    if: ${{ needs.checks.outputs.changed-docs }}
    # Now this job only runs when the 'output' of the previous step is `true` for `changed-docs`
    steps:
      - name: Publish docs
        run: echo "deploy docs"


    